--  FastAPI
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: 0.1.0
--  
--
--  NOTE: This package is auto generated by OpenAPI-Generator 4.0.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

with Swagger.Streams;
package body .Clients is

   --  Apply model for the background_removal task for a given models
   procedure Apply_Image_Image_Background_Removal_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/image/background-removal/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Image_Background_Removal_Post;

   --  Get list of models available for background_removal
   procedure Get_Versions_Image_Image_Background_Removal_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/image/background-removal/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Image_Background_Removal_Get;

   --  Apply model for the colorization task for a given models
   procedure Apply_Image_Image_Colorization_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/image/colorization/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Image_Colorization_Post;

   --  Get list of models available for colorization
   procedure Get_Versions_Image_Image_Colorization_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/image/colorization/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Image_Colorization_Get;

   --  Apply model for the face_bluring task for a given models
   procedure Apply_Image_Image_Face_Bluring_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/image/face-bluring/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Image_Face_Bluring_Post;

   --  Get list of models available for face_bluring
   procedure Get_Versions_Image_Image_Face_Bluring_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/image/face-bluring/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Image_Face_Bluring_Get;

   --  Apply model for the restoration task for a given models
   procedure Apply_Image_Image_Restoration_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/image/restoration/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Image_Restoration_Post;

   --  Get list of models available for restoration
   procedure Get_Versions_Image_Image_Restoration_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/image/restoration/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Image_Restoration_Get;

   --  Apply model for the super_resolution task for a given models
   procedure Apply_Image_Image_Super_Resolution_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/image/super-resolution/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Image_Super_Resolution_Post;

   --  Get list of models available for super_resolution
   procedure Get_Versions_Image_Image_Super_Resolution_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/image/super-resolution/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Image_Super_Resolution_Get;

   --  Apply model for the uncolorization task for a given models
   procedure Apply_Image_Image_Uncolorization_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/image/uncolorization/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Image_Uncolorization_Post;

   --  Get list of models available for uncolorization
   procedure Get_Versions_Image_Image_Uncolorization_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/image/uncolorization/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Image_Uncolorization_Get;

   --  Apply model for the asciify task for a given models
   procedure Apply_Image_Text_Asciify_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/text/asciify/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Text_Asciify_Post;

   --  Get list of models available for asciify
   procedure Get_Versions_Image_Text_Asciify_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/text/asciify/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Text_Asciify_Get;

   --  Apply model for the ocr task for a given models
   procedure Apply_Image_Text_Ocr_Post
      (Client : in out Client_Type;
       Image : in Swagger.File_Part_Type;
       Source_Language : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "image", Image);

      URI.Add_Param ("source_language", Source_Language);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/image/text/ocr/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Image_Text_Ocr_Post;

   --  Get list of models available for ocr
   procedure Get_Versions_Image_Text_Ocr_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/image/text/ocr/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Image_Text_Ocr_Get;

   --  Apply model for the autocorrect task for a given models
   procedure Apply_Text_Text_Autocorrect_Post
      (Client : in out Client_Type;
       Sentence : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("sentence", Sentence);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/autocorrect/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Autocorrect_Post;

   --  Get list of models available for autocorrect
   procedure Get_Versions_Text_Text_Autocorrect_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/autocorrect/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Autocorrect_Get;

   --  Apply model for the boolean_question_generation task for a given models
   procedure Apply_Text_Text_Boolean_Question_Generation_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/boolean-question-generation/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Boolean_Question_Generation_Post;

   --  Get list of models available for boolean_question_generation
   procedure Get_Versions_Text_Text_Boolean_Question_Generation_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/boolean-question-generation/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Boolean_Question_Generation_Get;

   --  Apply model for the dependency_tracking task for a given models
   procedure Apply_Text_Text_Dependency_Tracking_Post
      (Client : in out Client_Type;
       Input_String : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("input_string", Input_String);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/dependency-tracking/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Dependency_Tracking_Post;

   --  Get list of models available for dependency_tracking
   procedure Get_Versions_Text_Text_Dependency_Tracking_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/dependency-tracking/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Dependency_Tracking_Get;

   --  Apply model for the emotion_recognition task for a given models
   procedure Apply_Text_Text_Emotion_Recognition_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/emotion-recognition/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Emotion_Recognition_Post;

   --  Get list of models available for emotion_recognition
   procedure Get_Versions_Text_Text_Emotion_Recognition_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/emotion-recognition/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Emotion_Recognition_Get;

   --  Apply model for the entity_extraction task for a given models
   procedure Apply_Text_Text_Entity_Extraction_Post
      (Client : in out Client_Type;
       Input_String : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("input_string", Input_String);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/entity-extraction/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Entity_Extraction_Post;

   --  Get list of models available for entity_extraction
   procedure Get_Versions_Text_Text_Entity_Extraction_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/entity-extraction/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Entity_Extraction_Get;

   --  Apply model for the hate_speech_detection task for a given models
   procedure Apply_Text_Text_Hate_Speech_Detection_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/hate-speech-detection/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Hate_Speech_Detection_Post;

   --  Get list of models available for hate_speech_detection
   procedure Get_Versions_Text_Text_Hate_Speech_Detection_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/hate-speech-detection/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Hate_Speech_Detection_Get;

   --  Apply model for the keyword_extraction task for a given models
   procedure Apply_Text_Text_Keyword_Extraction_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/keyword-extraction/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Keyword_Extraction_Post;

   --  Get list of models available for keyword_extraction
   procedure Get_Versions_Text_Text_Keyword_Extraction_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/keyword-extraction/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Keyword_Extraction_Get;

   --  Apply model for the language_detection task for a given models
   procedure Apply_Text_Text_Language_Detection_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/language-detection/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Language_Detection_Post;

   --  Get list of models available for language_detection
   procedure Get_Versions_Text_Text_Language_Detection_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/language-detection/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Language_Detection_Get;

   --  Apply model for the language_generation task for a given models
   procedure Apply_Text_Text_Language_Generation_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/language-generation/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Language_Generation_Post;

   --  Get list of models available for language_generation
   procedure Get_Versions_Text_Text_Language_Generation_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/language-generation/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Language_Generation_Get;

   --  Apply model for the lemmatization task for a given models
   procedure Apply_Text_Text_Lemmatization_Post
      (Client : in out Client_Type;
       Sentence : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("sentence", Sentence);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/lemmatization/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Lemmatization_Post;

   --  Get list of models available for lemmatization
   procedure Get_Versions_Text_Text_Lemmatization_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/lemmatization/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Lemmatization_Get;

   --  Apply model for the named_entity_recognition task for a given models
   procedure Apply_Text_Text_Named_Entity_Recognition_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/named-entity-recognition/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Named_Entity_Recognition_Post;

   --  Get list of models available for named_entity_recognition
   procedure Get_Versions_Text_Text_Named_Entity_Recognition_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/named-entity-recognition/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Named_Entity_Recognition_Get;

   --  Apply model for the next_sentence_prediction task for a given models
   procedure Apply_Text_Text_Next_Sentence_Prediction_Post
      (Client : in out Client_Type;
       Sentence1 : in Swagger.Nullable_UString;
       Sentence2 : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("sentence_1", Sentence1);
      URI.Add_Param ("sentence_2", Sentence2);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/next-sentence-prediction/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Next_Sentence_Prediction_Post;

   --  Get list of models available for next_sentence_prediction
   procedure Get_Versions_Text_Text_Next_Sentence_Prediction_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/next-sentence-prediction/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Next_Sentence_Prediction_Get;

   --  Apply model for the next_word_prediction task for a given models
   procedure Apply_Text_Text_Next_Word_Prediction_Post
      (Client : in out Client_Type;
       Sentence : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("sentence", Sentence);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/next-word-prediction/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Next_Word_Prediction_Post;

   --  Get list of models available for next_word_prediction
   procedure Get_Versions_Text_Text_Next_Word_Prediction_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/next-word-prediction/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Next_Word_Prediction_Get;

   --  Apply model for the plural task for a given models
   procedure Apply_Text_Text_Plural_Post
      (Client : in out Client_Type;
       Word : in Swagger.Nullable_UString;
       Count : in Swagger.Nullable_Integer;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("word", Word);
      URI.Add_Param ("count", Count);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/plural/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Plural_Post;

   --  Get list of models available for plural
   procedure Get_Versions_Text_Text_Plural_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/plural/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Plural_Get;

   --  Apply model for the programming_language_generation task for a given models
   procedure Apply_Text_Text_Programming_Language_Generation_Post
      (Client : in out Client_Type;
       Code_Snippet : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("code_snippet", Code_Snippet);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/programming-language-generation/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Programming_Language_Generation_Post;

   --  Get list of models available for programming_language_generation
   procedure Get_Versions_Text_Text_Programming_Language_Generation_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/programming-language-generation/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Programming_Language_Generation_Get;

   --  Apply model for the programming_language_identification task for a given models
   procedure Apply_Text_Text_Programming_Language_Identification_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/programming-language-identification/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Programming_Language_Identification_Post;

   --  Get list of models available for programming_language_identification
   procedure Get_Versions_Text_Text_Programming_Language_Identification_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/programming-language-identification/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Programming_Language_Identification_Get;

   --  Apply model for the question_answering task for a given models
   procedure Apply_Text_Text_Question_Answering_Post
      (Client : in out Client_Type;
       Context : in Swagger.Nullable_UString;
       Question : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("context", Context);
      URI.Add_Param ("question", Question);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/question-answering/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Question_Answering_Post;

   --  Get list of models available for question_answering
   procedure Get_Versions_Text_Text_Question_Answering_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/question-answering/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Question_Answering_Get;

   --  Apply model for the sentence_pair_modeling task for a given models
   procedure Apply_Text_Text_Sentence_Pair_Modeling_Post
      (Client : in out Client_Type;
       Sentence : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("sentence", Sentence);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/sentence-pair-modeling/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Sentence_Pair_Modeling_Post;

   --  Get list of models available for sentence_pair_modeling
   procedure Get_Versions_Text_Text_Sentence_Pair_Modeling_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/sentence-pair-modeling/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Sentence_Pair_Modeling_Get;

   --  Apply model for the sentence_paraphraser task for a given models
   procedure Apply_Text_Text_Sentence_Paraphraser_Post
      (Client : in out Client_Type;
       Context : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("context", Context);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/sentence-paraphraser/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Sentence_Paraphraser_Post;

   --  Get list of models available for sentence_paraphraser
   procedure Get_Versions_Text_Text_Sentence_Paraphraser_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/sentence-paraphraser/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Sentence_Paraphraser_Get;

   --  Apply model for the sentiment_analysis task for a given models
   procedure Apply_Text_Text_Sentiment_Analysis_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/sentiment-analysis/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Sentiment_Analysis_Post;

   --  Get list of models available for sentiment_analysis
   procedure Get_Versions_Text_Text_Sentiment_Analysis_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/sentiment-analysis/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Sentiment_Analysis_Get;

   --  Apply model for the similarity task for a given models
   procedure Apply_Text_Text_Similarity_Post
      (Client : in out Client_Type;
       Sentence1 : in Swagger.Nullable_UString;
       Sentence2 : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("sentence_1", Sentence1);
      URI.Add_Param ("sentence_2", Sentence2);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/similarity/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Similarity_Post;

   --  Get list of models available for similarity
   procedure Get_Versions_Text_Text_Similarity_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/similarity/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Similarity_Get;

   --  Apply model for the summarization task for a given models
   procedure Apply_Text_Text_Summarization_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Source_Language : in Swagger.Nullable_UString;
       Max_Length : in Swagger.Nullable_Integer;
       Min_Length : in Swagger.Nullable_Integer;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("source_language", Source_Language);
      URI.Add_Param ("max_length", Max_Length);
      URI.Add_Param ("min_length", Min_Length);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/summarization/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Summarization_Post;

   --  Get list of models available for summarization
   procedure Get_Versions_Text_Text_Summarization_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/summarization/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Summarization_Get;

   --  Apply model for the translation task for a given models
   procedure Apply_Text_Text_Translation_Post
      (Client : in out Client_Type;
       Input_String : in Swagger.Nullable_UString;
       Source_Language : in Swagger.Nullable_UString;
       Target_Language : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("input_string", Input_String);
      URI.Add_Param ("source_language", Source_Language);
      URI.Add_Param ("target_language", Target_Language);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/translation/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Translation_Post;

   --  Get list of models available for translation
   procedure Get_Versions_Text_Text_Translation_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/translation/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Translation_Get;

   --  Apply model for the transliteration task for a given models
   procedure Apply_Text_Text_Transliteration_Post
      (Client : in out Client_Type;
       Text : in Swagger.Nullable_UString;
       Language : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("text", Text);
      URI.Add_Param ("language", Language);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/transliteration/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Transliteration_Post;

   --  Get list of models available for transliteration
   procedure Get_Versions_Text_Text_Transliteration_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/transliteration/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Transliteration_Get;

   --  Apply model for the word_alignment task for a given models
   procedure Apply_Text_Text_Word_Alignment_Post
      (Client : in out Client_Type;
       Input_String_Language1 : in Swagger.Nullable_UString;
       Input_String_Language2 : in Swagger.Nullable_UString;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("input_string_language_1", Input_String_Language1);
      URI.Add_Param ("input_string_language_2", Input_String_Language2);
      URI.Add_Param ("model", Model);
      URI.Set_Path ("/text/text/word-alignment/");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Text_Text_Word_Alignment_Post;

   --  Get list of models available for word_alignment
   procedure Get_Versions_Text_Text_Word_Alignment_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/text/text/word-alignment/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Text_Text_Word_Alignment_Get;

   --  Apply model for the frame_interpolation task for a given models
   procedure Apply_Video_Video_Frame_Interpolation_Post
      (Client : in out Client_Type;
       Video : in Swagger.File_Part_Type;
       Model : in Swagger.Nullable_UString;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "video", Video);

      URI.Add_Param ("model", Model);
      URI.Set_Path ("/video/video/frame-interpolation/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Apply_Video_Video_Frame_Interpolation_Post;

   --  Get list of models available for frame_interpolation
   procedure Get_Versions_Video_Video_Frame_Interpolation_Get
      (Client : in out Client_Type;
       Result : out Swagger.Object) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/video/video/frame-interpolation/");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Versions_Video_Video_Frame_Interpolation_Get;
end .Clients;
