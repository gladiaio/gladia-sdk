/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIHTTPValidationError.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIHTTPValidationError::OAIHTTPValidationError(QString json) {
    this->init();
    this->fromJson(json);
}

OAIHTTPValidationError::OAIHTTPValidationError() {
    this->init();
}

OAIHTTPValidationError::~OAIHTTPValidationError() {

}

void
OAIHTTPValidationError::init() {
    
    m_detail_isSet = false;
    m_detail_isValid = false;
    }

void
OAIHTTPValidationError::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIHTTPValidationError::fromJsonObject(QJsonObject json) {
    
    
    m_detail_isValid = ::OpenAPI::fromJsonValue(detail, json[QString("detail")]);
    
}

QString
OAIHTTPValidationError::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIHTTPValidationError::asJsonObject() const {
    QJsonObject obj;
	
    if(detail.size() > 0){
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(detail));
    } 
    return obj;
}


QList<OAIValidationError>
OAIHTTPValidationError::getDetail() const {
    return detail;
}
void
OAIHTTPValidationError::setDetail(const QList<OAIValidationError> &detail) {
    this->detail = detail;
    this->m_detail_isSet = true;
}

bool
OAIHTTPValidationError::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(detail.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIHTTPValidationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

