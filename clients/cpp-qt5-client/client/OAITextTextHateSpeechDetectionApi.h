/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextTextHateSpeechDetectionApi_H
#define OAI_OAITextTextHateSpeechDetectionApi_H

#include "OAIHttpRequest.h"

#include "OAIHTTPValidationError.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAITextTextHateSpeechDetectionApi: public QObject {
    Q_OBJECT

public:
    OAITextTextHateSpeechDetectionApi();
    OAITextTextHateSpeechDetectionApi(QString host, QString basePath);
    ~OAITextTextHateSpeechDetectionApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void applyTextTextHateSpeechDetectionPost(const QString& text, const QString& model);
    void getVersionsTextTextHateSpeechDetectionGet();
    
private:
    void applyTextTextHateSpeechDetectionPostCallback (OAIHttpRequestWorker * worker);
    void getVersionsTextTextHateSpeechDetectionGetCallback (OAIHttpRequestWorker * worker);
    
signals:
    void applyTextTextHateSpeechDetectionPostSignal(OAIObject summary);
    void getVersionsTextTextHateSpeechDetectionGetSignal(OAIObject summary);
    
    void applyTextTextHateSpeechDetectionPostSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getVersionsTextTextHateSpeechDetectionGetSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    
    void applyTextTextHateSpeechDetectionPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionsTextTextHateSpeechDetectionGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void applyTextTextHateSpeechDetectionPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionsTextTextHateSpeechDetectionGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
