/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextTextKeywordExtractionApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITextTextKeywordExtractionApi::OAITextTextKeywordExtractionApi() {

}

OAITextTextKeywordExtractionApi::~OAITextTextKeywordExtractionApi() {

}

OAITextTextKeywordExtractionApi::OAITextTextKeywordExtractionApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAITextTextKeywordExtractionApi::applyTextTextKeywordExtractionPost(const QString& text, const QString& model) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/text/text/keyword-extraction/");
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("text"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(text)));
    
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("model"))
        .append("=")
        .append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(model)));
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITextTextKeywordExtractionApi::applyTextTextKeywordExtractionPostCallback);

    worker->execute(&input);
}

void
OAITextTextKeywordExtractionApi::applyTextTextKeywordExtractionPostCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit applyTextTextKeywordExtractionPostSignal(output);
        emit applyTextTextKeywordExtractionPostSignalFull(worker, output);
    } else {
        emit applyTextTextKeywordExtractionPostSignalE(output, error_type, error_str);
        emit applyTextTextKeywordExtractionPostSignalEFull(worker, error_type, error_str);
    }
}

void
OAITextTextKeywordExtractionApi::getVersionsTextTextKeywordExtractionGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/text/text/keyword-extraction/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITextTextKeywordExtractionApi::getVersionsTextTextKeywordExtractionGetCallback);

    worker->execute(&input);
}

void
OAITextTextKeywordExtractionApi::getVersionsTextTextKeywordExtractionGetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getVersionsTextTextKeywordExtractionGetSignal(output);
        emit getVersionsTextTextKeywordExtractionGetSignalFull(worker, output);
    } else {
        emit getVersionsTextTextKeywordExtractionGetSignalE(output, error_type, error_str);
        emit getVersionsTextTextKeywordExtractionGetSignalEFull(worker, error_type, error_str);
    }
}


}
