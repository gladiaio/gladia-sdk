/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextTextNamedEntityRecognitionApi_H
#define OAI_OAITextTextNamedEntityRecognitionApi_H

#include "OAIHttpRequest.h"

#include "OAIHTTPValidationError.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAITextTextNamedEntityRecognitionApi: public QObject {
    Q_OBJECT

public:
    OAITextTextNamedEntityRecognitionApi();
    OAITextTextNamedEntityRecognitionApi(QString host, QString basePath);
    ~OAITextTextNamedEntityRecognitionApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void applyTextTextNamedEntityRecognitionPost(const QString& text, const QString& model);
    void getVersionsTextTextNamedEntityRecognitionGet();
    
private:
    void applyTextTextNamedEntityRecognitionPostCallback (OAIHttpRequestWorker * worker);
    void getVersionsTextTextNamedEntityRecognitionGetCallback (OAIHttpRequestWorker * worker);
    
signals:
    void applyTextTextNamedEntityRecognitionPostSignal(OAIObject summary);
    void getVersionsTextTextNamedEntityRecognitionGetSignal(OAIObject summary);
    
    void applyTextTextNamedEntityRecognitionPostSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getVersionsTextTextNamedEntityRecognitionGetSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    
    void applyTextTextNamedEntityRecognitionPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionsTextTextNamedEntityRecognitionGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void applyTextTextNamedEntityRecognitionPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionsTextTextNamedEntityRecognitionGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
