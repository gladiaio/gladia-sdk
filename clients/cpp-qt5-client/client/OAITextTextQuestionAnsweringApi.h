/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextTextQuestionAnsweringApi_H
#define OAI_OAITextTextQuestionAnsweringApi_H

#include "OAIHttpRequest.h"

#include "OAIHTTPValidationError.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAITextTextQuestionAnsweringApi: public QObject {
    Q_OBJECT

public:
    OAITextTextQuestionAnsweringApi();
    OAITextTextQuestionAnsweringApi(QString host, QString basePath);
    ~OAITextTextQuestionAnsweringApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void applyTextTextQuestionAnsweringPost(const QString& context, const QString& question, const QString& model);
    void getVersionsTextTextQuestionAnsweringGet();
    
private:
    void applyTextTextQuestionAnsweringPostCallback (OAIHttpRequestWorker * worker);
    void getVersionsTextTextQuestionAnsweringGetCallback (OAIHttpRequestWorker * worker);
    
signals:
    void applyTextTextQuestionAnsweringPostSignal(OAIObject summary);
    void getVersionsTextTextQuestionAnsweringGetSignal(OAIObject summary);
    
    void applyTextTextQuestionAnsweringPostSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    void getVersionsTextTextQuestionAnsweringGetSignalFull(OAIHttpRequestWorker* worker, OAIObject summary);
    
    void applyTextTextQuestionAnsweringPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionsTextTextQuestionAnsweringGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void applyTextTextQuestionAnsweringPostSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionsTextTextQuestionAnsweringGetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
