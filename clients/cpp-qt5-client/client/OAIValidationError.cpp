/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIValidationError.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIValidationError::OAIValidationError(QString json) {
    this->init();
    this->fromJson(json);
}

OAIValidationError::OAIValidationError() {
    this->init();
}

OAIValidationError::~OAIValidationError() {

}

void
OAIValidationError::init() {
    
    m_loc_isSet = false;
    m_loc_isValid = false;
    
    m_msg_isSet = false;
    m_msg_isValid = false;
    
    m_type_isSet = false;
    m_type_isValid = false;
    }

void
OAIValidationError::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIValidationError::fromJsonObject(QJsonObject json) {
    
    
    m_loc_isValid = ::OpenAPI::fromJsonValue(loc, json[QString("loc")]);
    
    m_msg_isValid = ::OpenAPI::fromJsonValue(msg, json[QString("msg")]);
    
    
    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    
    
}

QString
OAIValidationError::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIValidationError::asJsonObject() const {
    QJsonObject obj;
	
    if(loc.size() > 0){
        obj.insert(QString("loc"), ::OpenAPI::toJsonValue(loc));
    } 
	if(m_msg_isSet){
        obj.insert(QString("msg"), ::OpenAPI::toJsonValue(msg));
    }
	if(m_type_isSet){
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    return obj;
}


QList<QString>
OAIValidationError::getLoc() const {
    return loc;
}
void
OAIValidationError::setLoc(const QList<QString> &loc) {
    this->loc = loc;
    this->m_loc_isSet = true;
}


QString
OAIValidationError::getMsg() const {
    return msg;
}
void
OAIValidationError::setMsg(const QString &msg) {
    this->msg = msg;
    this->m_msg_isSet = true;
}


QString
OAIValidationError::getType() const {
    return type;
}
void
OAIValidationError::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool
OAIValidationError::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(loc.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_msg_isSet){ isObjectUpdated = true; break;}
    
        if(m_type_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIValidationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_loc_isValid && m_msg_isValid && m_type_isValid && true;
}

}

