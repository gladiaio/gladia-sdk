/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ValidationError.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ValidationError::ValidationError()
{
    m_Msg = utility::conversions::to_string_t("");
    m_Type = utility::conversions::to_string_t("");
}

ValidationError::~ValidationError()
{
}

void ValidationError::validate()
{
    // TODO: implement validation
}

web::json::value ValidationError::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Loc )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("loc")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("msg")] = ModelBase::toJson(m_Msg);
    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);

    return val;
}

void ValidationError::fromJson(const web::json::value& val)
{
    {
        m_Loc.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("loc")).as_array() )
        {
            m_Loc.push_back(ModelBase::stringFromJson(item));
        }
    }
    setMsg(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("msg"))));
    setType(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("type"))));
}

void ValidationError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Loc )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("loc"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("msg"), m_Msg));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
}

void ValidationError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Loc.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("loc"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Loc.push_back(ModelBase::stringFromJson(item));
        }
    }
    setMsg(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("msg"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
}

std::vector<utility::string_t>& ValidationError::getLoc()
{
    return m_Loc;
}

void ValidationError::setLoc(const std::vector<utility::string_t>& value)
{
    m_Loc = value;
    
}

utility::string_t ValidationError::getMsg() const
{
    return m_Msg;
}

void ValidationError::setMsg(const utility::string_t& value)
{
    m_Msg = value;
    
}

utility::string_t ValidationError::getType() const
{
    return m_Type;
}

void ValidationError::setType(const utility::string_t& value)
{
    m_Type = value;
    
}

}
}
}
}


