=begin
#FastAPI

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module OpenapiClient
  class ImageImageSuperResolutionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply model for the super-resolution task for a given models
    # @param image [File] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model  (default to 'idealo-psnr-small')
    # @return [Object]
    def apply_image_image_super_resolution_post(image, opts = {})
      data, _status_code, _headers = apply_image_image_super_resolution_post_with_http_info(image, opts)
      data
    end

    # Apply model for the super-resolution task for a given models
    # @param image [File] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def apply_image_image_super_resolution_post_with_http_info(image, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageImageSuperResolutionApi.apply_image_image_super_resolution_post ...'
      end
      # verify the required parameter 'image' is set
      if @api_client.config.client_side_validation && image.nil?
        fail ArgumentError, "Missing the required parameter 'image' when calling ImageImageSuperResolutionApi.apply_image_image_super_resolution_post"
      end
      allowable_values = ["idealo-psnr-small"]
      if @api_client.config.client_side_validation && opts[:'model'] && !allowable_values.include?(opts[:'model'])
        fail ArgumentError, "invalid value for \"model\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/image/image/super-resolution/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'model'] = opts[:'model'] if !opts[:'model'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['image'] = image

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageImageSuperResolutionApi#apply_image_image_super_resolution_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of models available for super-resolution
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_versions_image_image_super_resolution_get(opts = {})
      data, _status_code, _headers = get_versions_image_image_super_resolution_get_with_http_info(opts)
      data
    end

    # Get list of models available for super-resolution
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_versions_image_image_super_resolution_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageImageSuperResolutionApi.get_versions_image_image_super_resolution_get ...'
      end
      # resource path
      local_var_path = '/image/image/super-resolution/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageImageSuperResolutionApi#get_versions_image_image_super_resolution_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
