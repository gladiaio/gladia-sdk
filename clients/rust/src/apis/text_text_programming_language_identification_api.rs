/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct TextTextProgrammingLanguageIdentificationApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> TextTextProgrammingLanguageIdentificationApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TextTextProgrammingLanguageIdentificationApiClient<C> {
        TextTextProgrammingLanguageIdentificationApiClient {
            configuration: configuration,
        }
    }
}

pub trait TextTextProgrammingLanguageIdentificationApi {
    fn apply_text_text_programming_language_identification_post(&self, text: &str, model: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
    fn get_versions_text_text_programming_language_identification_get(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>TextTextProgrammingLanguageIdentificationApi for TextTextProgrammingLanguageIdentificationApiClient<C> {
    fn apply_text_text_programming_language_identification_post(&self, text: &str, model: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/text/text/programming-language-identification/".to_string())
            .with_query_param("text".to_string(), text.to_string())
            .with_query_param("model".to_string(), model.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_versions_text_text_programming_language_identification_get(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/text/text/programming-language-identification/".to_string())
            .execute(self.configuration.borrow())
    }

}
