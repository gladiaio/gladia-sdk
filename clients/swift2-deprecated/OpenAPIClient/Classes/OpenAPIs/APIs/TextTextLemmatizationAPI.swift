//
// TextTextLemmatizationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class TextTextLemmatizationAPI: APIBase {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextLemmatizationPost: String { 
        case Wordnet = "wordnet"
    }

    /**
     Apply model for the lemmatization task for a given models
     
     - parameter sentence: (query)  (optional)
     - parameter model: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func applyTextTextLemmatizationPost(sentence sentence: String? = nil, model: Model_applyTextTextLemmatizationPost? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        applyTextTextLemmatizationPostWithRequestBuilder(sentence: sentence, model: model).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Apply model for the lemmatization task for a given models
     - POST /text/text/lemmatization/     - parameter sentence: (query)  (optional)
     - parameter model: (query)  (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func applyTextTextLemmatizationPostWithRequestBuilder(sentence sentence: String? = nil, model: Model_applyTextTextLemmatizationPost? = nil) -> RequestBuilder<AnyObject> {
        let path = "/text/text/lemmatization/"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "sentence": sentence,
            "model": model?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get list of models available for lemmatization
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVersionsTextTextLemmatizationGet(completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        getVersionsTextTextLemmatizationGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of models available for lemmatization
     - GET /text/text/lemmatization/
     - returns: RequestBuilder<AnyObject> 
     */
    public class func getVersionsTextTextLemmatizationGetWithRequestBuilder() -> RequestBuilder<AnyObject> {
        let path = "/text/text/lemmatization/"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
