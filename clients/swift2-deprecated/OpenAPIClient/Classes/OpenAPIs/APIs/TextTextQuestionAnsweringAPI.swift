//
// TextTextQuestionAnsweringAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class TextTextQuestionAnsweringAPI: APIBase {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextQuestionAnsweringPost: String { 
        case Mrm8488BertTiny5FinetunedSquadv2 = "mrm8488-bert-tiny-5-finetuned-squadv2"
        case MfebAlbertXxlargeV2Squad2 = "mfeb-albert-xxlarge-v2-squad2"
        case DeepsetRobertaBaseSquad2 = "deepset-roberta-base-squad2"
        case DistilbertBaseCasedDistilledSquad = "distilbert-base-cased-distilled-squad"
        case DeepsetBertBaseCasedSquad2 = "deepset_bert-base-cased-squad2"
    }

    /**
     Apply model for the question-answering task for a given models
     
     - parameter context: (query)  (optional)
     - parameter question: (query)  (optional)
     - parameter model: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func applyTextTextQuestionAnsweringPost(context context: String? = nil, question: String? = nil, model: Model_applyTextTextQuestionAnsweringPost? = nil, completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        applyTextTextQuestionAnsweringPostWithRequestBuilder(context: context, question: question, model: model).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Apply model for the question-answering task for a given models
     - POST /text/text/question-answering/     - parameter context: (query)  (optional)
     - parameter question: (query)  (optional)
     - parameter model: (query)  (optional)

     - returns: RequestBuilder<AnyObject> 
     */
    public class func applyTextTextQuestionAnsweringPostWithRequestBuilder(context context: String? = nil, question: String? = nil, model: Model_applyTextTextQuestionAnsweringPost? = nil) -> RequestBuilder<AnyObject> {
        let path = "/text/text/question-answering/"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "context": context,
            "question": question,
            "model": model?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get list of models available for question-answering
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVersionsTextTextQuestionAnsweringGet(completion: ((data: AnyObject?, error: ErrorType?) -> Void)) {
        getVersionsTextTextQuestionAnsweringGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of models available for question-answering
     - GET /text/text/question-answering/
     - returns: RequestBuilder<AnyObject> 
     */
    public class func getVersionsTextTextQuestionAnsweringGetWithRequestBuilder() -> RequestBuilder<AnyObject> {
        let path = "/text/text/question-answering/"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnyObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
