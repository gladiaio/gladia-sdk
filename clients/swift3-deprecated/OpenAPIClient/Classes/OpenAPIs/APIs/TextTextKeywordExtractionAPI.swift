//
// TextTextKeywordExtractionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire


open class TextTextKeywordExtractionAPI: APIBase {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextKeywordExtractionPost: String { 
        case minilmL6V2 = "keybert-paraphrase-MiniLM-L6-v2"
        case multilingualMinilmL12V2 = "keybert-paraphrase-multilingual-MiniLM-L12-v2"
    }

    /**
     Apply model for the keyword-extraction task for a given models
     - parameter text: (query)  (optional)
     - parameter model: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applyTextTextKeywordExtractionPost(text: String? = nil, model: Model_applyTextTextKeywordExtractionPost? = nil, completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        applyTextTextKeywordExtractionPostWithRequestBuilder(text: text, model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Apply model for the keyword-extraction task for a given models
     - POST /text/text/keyword-extraction/
     - parameter text: (query)  (optional)
     - parameter model: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func applyTextTextKeywordExtractionPostWithRequestBuilder(text: String? = nil, model: Model_applyTextTextKeywordExtractionPost? = nil) -> RequestBuilder<Any> {
        let path = "/text/text/keyword-extraction/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "text": text,
            "model": model?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of models available for keyword-extraction
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionsTextTextKeywordExtractionGet(completion: @escaping ((_ data: Any?, _ error: ErrorResponse?) -> Void)) {
        getVersionsTextTextKeywordExtractionGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of models available for keyword-extraction
     - GET /text/text/keyword-extraction/
     - returns: RequestBuilder<Any> 
     */
    open class func getVersionsTextTextKeywordExtractionGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/text/text/keyword-extraction/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
