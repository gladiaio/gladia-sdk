//
// TextTextEntityExtractionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TextTextEntityExtractionAPI {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextEntityExtractionPost: String {
        case dbmdzBertLargeCasedFinetunedConll03English = "dbmdz-bert-large-cased-finetuned-conll03-english"
    }

    /**
     Apply model for the entity-extraction task for a given models
     
     - parameter inputString: (query)  (optional, default to "Text to extract entities from")
     - parameter model: (query)  (optional, default to .dbmdz-bert-large-cased-finetuned-conll03-english)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applyTextTextEntityExtractionPost(inputString: String? = nil, model: Model_applyTextTextEntityExtractionPost? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        applyTextTextEntityExtractionPostWithRequestBuilder(inputString: inputString, model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Apply model for the entity-extraction task for a given models
     - POST /text/text/entity-extraction/
     - parameter inputString: (query)  (optional, default to "Text to extract entities from")
     - parameter model: (query)  (optional, default to .dbmdz-bert-large-cased-finetuned-conll03-english)
     - returns: RequestBuilder<Any> 
     */
    open class func applyTextTextEntityExtractionPostWithRequestBuilder(inputString: String? = nil, model: Model_applyTextTextEntityExtractionPost? = nil) -> RequestBuilder<Any> {
        let path = "/text/text/entity-extraction/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "input_string": inputString, 
            "model": model?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of models available for entity-extraction
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionsTextTextEntityExtractionGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getVersionsTextTextEntityExtractionGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get list of models available for entity-extraction
     - GET /text/text/entity-extraction/
     - returns: RequestBuilder<Any> 
     */
    open class func getVersionsTextTextEntityExtractionGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/text/text/entity-extraction/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
