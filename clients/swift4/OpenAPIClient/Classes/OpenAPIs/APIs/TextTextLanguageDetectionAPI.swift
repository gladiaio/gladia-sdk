//
// TextTextLanguageDetectionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TextTextLanguageDetectionAPI {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextLanguageDetectionPost: String {
        case toftrupEtal2021 = "toftrup-etal-2021"
    }

    /**
     Apply model for the language-detection task for a given models
     
     - parameter text: (query)  (optional, default to "Input text to perform language detection on")
     - parameter model: (query)  (optional, default to .toftrup-etal-2021)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applyTextTextLanguageDetectionPost(text: String? = nil, model: Model_applyTextTextLanguageDetectionPost? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        applyTextTextLanguageDetectionPostWithRequestBuilder(text: text, model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Apply model for the language-detection task for a given models
     - POST /text/text/language-detection/
     - parameter text: (query)  (optional, default to "Input text to perform language detection on")
     - parameter model: (query)  (optional, default to .toftrup-etal-2021)
     - returns: RequestBuilder<Any> 
     */
    open class func applyTextTextLanguageDetectionPostWithRequestBuilder(text: String? = nil, model: Model_applyTextTextLanguageDetectionPost? = nil) -> RequestBuilder<Any> {
        let path = "/text/text/language-detection/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": text, 
            "model": model?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of models available for language-detection
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionsTextTextLanguageDetectionGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getVersionsTextTextLanguageDetectionGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get list of models available for language-detection
     - GET /text/text/language-detection/
     - returns: RequestBuilder<Any> 
     */
    open class func getVersionsTextTextLanguageDetectionGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/text/text/language-detection/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
