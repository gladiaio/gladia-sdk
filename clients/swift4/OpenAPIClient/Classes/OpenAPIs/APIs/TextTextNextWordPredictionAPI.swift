//
// TextTextNextWordPredictionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TextTextNextWordPredictionAPI {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextNextWordPredictionPost: String {
        case bertBaseUncased = "bert-base-uncased"
        case albertBaseV2 = "albert-base-v2"
        case distilbertBaseUncased = "distilbert-base-uncased"
        case robertaBase = "roberta-base"
    }

    /**
     Apply model for the next-word-prediction task for a given models
     
     - parameter sentence: (query)  (optional, default to "I think therefore I")
     - parameter model: (query)  (optional, default to .distilbert-base-uncased)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applyTextTextNextWordPredictionPost(sentence: String? = nil, model: Model_applyTextTextNextWordPredictionPost? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        applyTextTextNextWordPredictionPostWithRequestBuilder(sentence: sentence, model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Apply model for the next-word-prediction task for a given models
     - POST /text/text/next-word-prediction/
     - parameter sentence: (query)  (optional, default to "I think therefore I")
     - parameter model: (query)  (optional, default to .distilbert-base-uncased)
     - returns: RequestBuilder<Any> 
     */
    open class func applyTextTextNextWordPredictionPostWithRequestBuilder(sentence: String? = nil, model: Model_applyTextTextNextWordPredictionPost? = nil) -> RequestBuilder<Any> {
        let path = "/text/text/next-word-prediction/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sentence": sentence, 
            "model": model?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of models available for next-word-prediction
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionsTextTextNextWordPredictionGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getVersionsTextTextNextWordPredictionGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get list of models available for next-word-prediction
     - GET /text/text/next-word-prediction/
     - returns: RequestBuilder<Any> 
     */
    open class func getVersionsTextTextNextWordPredictionGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/text/text/next-word-prediction/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
