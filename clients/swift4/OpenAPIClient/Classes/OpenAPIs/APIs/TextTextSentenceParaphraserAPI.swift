//
// TextTextSentenceParaphraserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TextTextSentenceParaphraserAPI {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextSentenceParaphraserPost: String {
        case ramsrigouthamgT5LargeParaphraserDiverseHighQuality = "ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"
    }

    /**
     Apply model for the sentence-paraphraser task for a given models
     
     - parameter context: (query)  (optional, default to "Once, a group of frogs was roaming around the forest in search of water.")
     - parameter model: (query)  (optional, default to .ramsrigouthamg-t5-large-paraphraser-diverse-high-quality)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applyTextTextSentenceParaphraserPost(context: String? = nil, model: Model_applyTextTextSentenceParaphraserPost? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        applyTextTextSentenceParaphraserPostWithRequestBuilder(context: context, model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Apply model for the sentence-paraphraser task for a given models
     - POST /text/text/sentence-paraphraser/
     - parameter context: (query)  (optional, default to "Once, a group of frogs was roaming around the forest in search of water.")
     - parameter model: (query)  (optional, default to .ramsrigouthamg-t5-large-paraphraser-diverse-high-quality)
     - returns: RequestBuilder<Any> 
     */
    open class func applyTextTextSentenceParaphraserPostWithRequestBuilder(context: String? = nil, model: Model_applyTextTextSentenceParaphraserPost? = nil) -> RequestBuilder<Any> {
        let path = "/text/text/sentence-paraphraser/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "context": context, 
            "model": model?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of models available for sentence-paraphraser
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionsTextTextSentenceParaphraserGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getVersionsTextTextSentenceParaphraserGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get list of models available for sentence-paraphraser
     - GET /text/text/sentence-paraphraser/
     - returns: RequestBuilder<Any> 
     */
    open class func getVersionsTextTextSentenceParaphraserGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/text/text/sentence-paraphraser/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
