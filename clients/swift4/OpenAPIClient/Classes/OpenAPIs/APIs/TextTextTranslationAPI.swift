//
// TextTextTranslationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TextTextTranslationAPI {
    /**
     Apply model for the translation task for a given models
     
     - parameter inputString: (query)  (optional, default to "Text to translate")
     - parameter sourceLanguage: (query)  (optional, default to "en")
     - parameter targetLanguage: (query)  (optional, default to "fr")
     - parameter model: (query)  (optional, default to "Helsinki-NLP")
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applyTextTextTranslationPost(inputString: String? = nil, sourceLanguage: String? = nil, targetLanguage: String? = nil, model: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        applyTextTextTranslationPostWithRequestBuilder(inputString: inputString, sourceLanguage: sourceLanguage, targetLanguage: targetLanguage, model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Apply model for the translation task for a given models
     - POST /text/text/translation/
     - parameter inputString: (query)  (optional, default to "Text to translate")
     - parameter sourceLanguage: (query)  (optional, default to "en")
     - parameter targetLanguage: (query)  (optional, default to "fr")
     - parameter model: (query)  (optional, default to "Helsinki-NLP")
     - returns: RequestBuilder<Any> 
     */
    open class func applyTextTextTranslationPostWithRequestBuilder(inputString: String? = nil, sourceLanguage: String? = nil, targetLanguage: String? = nil, model: String? = nil) -> RequestBuilder<Any> {
        let path = "/text/text/translation/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "input_string": inputString, 
            "source_language": sourceLanguage, 
            "target_language": targetLanguage, 
            "model": model
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of models available for translation
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionsTextTextTranslationGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getVersionsTextTextTranslationGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get list of models available for translation
     - GET /text/text/translation/
     - returns: RequestBuilder<Any> 
     */
    open class func getVersionsTextTextTranslationGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/text/text/translation/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
