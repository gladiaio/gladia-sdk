//
// TextTextWordAlignmentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TextTextWordAlignmentAPI {
    /**
     * enum for parameter model
     */
    public enum Model_applyTextTextWordAlignmentPost: String {
        case bertBaseMultilingualCased = "bert-base-multilingual-cased"
    }

    /**
     Apply model for the word-alignment task for a given models
     
     - parameter inputStringLanguage1: (query)  (optional, default to "Sentence from first language")
     - parameter inputStringLanguage2: (query)  (optional, default to "来自 第一 语言的 句子")
     - parameter model: (query)  (optional, default to .bert-base-multilingual-cased)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applyTextTextWordAlignmentPost(inputStringLanguage1: String? = nil, inputStringLanguage2: String? = nil, model: Model_applyTextTextWordAlignmentPost? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        applyTextTextWordAlignmentPostWithRequestBuilder(inputStringLanguage1: inputStringLanguage1, inputStringLanguage2: inputStringLanguage2, model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Apply model for the word-alignment task for a given models
     - POST /text/text/word-alignment/
     - parameter inputStringLanguage1: (query)  (optional, default to "Sentence from first language")
     - parameter inputStringLanguage2: (query)  (optional, default to "来自 第一 语言的 句子")
     - parameter model: (query)  (optional, default to .bert-base-multilingual-cased)
     - returns: RequestBuilder<Any> 
     */
    open class func applyTextTextWordAlignmentPostWithRequestBuilder(inputStringLanguage1: String? = nil, inputStringLanguage2: String? = nil, model: Model_applyTextTextWordAlignmentPost? = nil) -> RequestBuilder<Any> {
        let path = "/text/text/word-alignment/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "input_string_language_1": inputStringLanguage1, 
            "input_string_language_2": inputStringLanguage2, 
            "model": model?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get list of models available for word-alignment
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionsTextTextWordAlignmentGet(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getVersionsTextTextWordAlignmentGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get list of models available for word-alignment
     - GET /text/text/word-alignment/
     - returns: RequestBuilder<Any> 
     */
    open class func getVersionsTextTextWordAlignmentGetWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/text/text/word-alignment/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
