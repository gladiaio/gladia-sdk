// tslint:disable
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface ApplyTextTextProgrammingLanguageIdentificationPostRequest {
    text?: string;
    model?: string;
}

/**
 * no description
 */
export class TextTextProgrammingLanguageIdentificationApi extends runtime.BaseAPI {

    /**
     * Apply model for the programming-language-identification task for a given models
     */
    async applyTextTextProgrammingLanguageIdentificationPostRaw(requestParameters: ApplyTextTextProgrammingLanguageIdentificationPostRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.model !== undefined) {
            queryParameters['model'] = requestParameters.model;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/text/text/programming-language-identification/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     * Apply model for the programming-language-identification task for a given models
     */
    async applyTextTextProgrammingLanguageIdentificationPost(requestParameters: ApplyTextTextProgrammingLanguageIdentificationPostRequest): Promise<object> {
        const response = await this.applyTextTextProgrammingLanguageIdentificationPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get list of models available for programming-language-identification
     */
    async getVersionsTextTextProgrammingLanguageIdentificationGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/text/text/programming-language-identification/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     * Get list of models available for programming-language-identification
     */
    async getVersionsTextTextProgrammingLanguageIdentificationGet(): Promise<object> {
        const response = await this.getVersionsTextTextProgrammingLanguageIdentificationGetRaw();
        return await response.value();
    }

}
