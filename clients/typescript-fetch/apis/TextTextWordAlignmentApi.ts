// tslint:disable
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface ApplyTextTextWordAlignmentPostRequest {
    inputStringLanguage1?: string;
    inputStringLanguage2?: string;
    model?: ApplyTextTextWordAlignmentPostModelEnum;
}

/**
 * no description
 */
export class TextTextWordAlignmentApi extends runtime.BaseAPI {

    /**
     * Apply model for the word-alignment task for a given models
     */
    async applyTextTextWordAlignmentPostRaw(requestParameters: ApplyTextTextWordAlignmentPostRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inputStringLanguage1 !== undefined) {
            queryParameters['input_string_language_1'] = requestParameters.inputStringLanguage1;
        }

        if (requestParameters.inputStringLanguage2 !== undefined) {
            queryParameters['input_string_language_2'] = requestParameters.inputStringLanguage2;
        }

        if (requestParameters.model !== undefined) {
            queryParameters['model'] = requestParameters.model;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/text/text/word-alignment/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     * Apply model for the word-alignment task for a given models
     */
    async applyTextTextWordAlignmentPost(requestParameters: ApplyTextTextWordAlignmentPostRequest): Promise<object> {
        const response = await this.applyTextTextWordAlignmentPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get list of models available for word-alignment
     */
    async getVersionsTextTextWordAlignmentGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/text/text/word-alignment/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     * Get list of models available for word-alignment
     */
    async getVersionsTextTextWordAlignmentGet(): Promise<object> {
        const response = await this.getVersionsTextTextWordAlignmentGetRaw();
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ApplyTextTextWordAlignmentPostModelEnum {
    BertBaseMultilingualCased = 'bert-base-multilingual-cased'
}
