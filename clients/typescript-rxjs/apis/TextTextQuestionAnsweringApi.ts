// tslint:disable
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    HTTPValidationError,
} from '../models';

export interface ApplyTextTextQuestionAnsweringPostRequest {
    context?: string;
    question?: string;
    model?: ApplyTextTextQuestionAnsweringPostModelEnum;
}

/**
 * no description
 */
export class TextTextQuestionAnsweringApi extends BaseAPI {

    /**
     * Apply model for the question-answering task for a given models
     */
    applyTextTextQuestionAnsweringPost(requestParameters: ApplyTextTextQuestionAnsweringPostRequest): Observable<object> {
        const queryParameters: HttpQuery = {};

        if (requestParameters.context !== undefined && requestParameters.context !== null) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.question !== undefined && requestParameters.question !== null) {
            queryParameters['question'] = requestParameters.question;
        }

        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        const headerParameters: HttpHeaders = {};

        return this.request<object>({
            path: `/text/text/question-answering/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Get list of models available for question-answering
     */
    getVersionsTextTextQuestionAnsweringGet(): Observable<object> {
        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<object>({
            path: `/text/text/question-answering/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ApplyTextTextQuestionAnsweringPostModelEnum {
    Mrm8488BertTiny5FinetunedSquadv2 = 'mrm8488-bert-tiny-5-finetuned-squadv2',
    MfebAlbertXxlargeV2Squad2 = 'mfeb-albert-xxlarge-v2-squad2',
    DeepsetRobertaBaseSquad2 = 'deepset-roberta-base-squad2',
    DistilbertBaseCasedDistilledSquad = 'distilbert-base-cased-distilled-squad',
    DeepsetBertBaseCasedSquad2 = 'deepset_bert-base-cased-squad2'
}
