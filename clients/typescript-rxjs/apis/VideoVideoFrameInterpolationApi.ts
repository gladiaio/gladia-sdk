// tslint:disable
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    HTTPValidationError,
} from '../models';

export interface ApplyVideoVideoFrameInterpolationPostRequest {
    video: Blob;
    model?: string;
}

/**
 * no description
 */
export class VideoVideoFrameInterpolationApi extends BaseAPI {

    /**
     * Apply model for the frame-interpolation task for a given models
     */
    applyVideoVideoFrameInterpolationPost(requestParameters: ApplyVideoVideoFrameInterpolationPostRequest): Observable<object> {
        if (requestParameters.video === null || requestParameters.video === undefined) {
            throw new RequiredError('video','Required parameter requestParameters.video was null or undefined when calling applyVideoVideoFrameInterpolationPost.');
        }

        const queryParameters: HttpQuery = {};

        if (requestParameters.model !== undefined && requestParameters.model !== null) {
            queryParameters['model'] = requestParameters.model;
        }

        const headerParameters: HttpHeaders = {};

        const formData = new FormData();
        if (requestParameters.video !== undefined) {
            formData.append('video', requestParameters.video as any);
        }

        return this.request<object>({
            path: `/video/video/frame-interpolation/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formData,
        });
    }

    /**
     * Get list of models available for frame-interpolation
     */
    getVersionsVideoVideoFrameInterpolationGet(): Observable<object> {
        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<object>({
            path: `/video/video/frame-interpolation/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

}
